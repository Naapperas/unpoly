TODOs after V3
==============

- Extend [up-switch] with [up-disable-for="..."] [up-enable-for="..."]
  - Or should we have an [up-switch-for] and [up-switch-effect]?
- up:feedback:start / up:feedback:stop
  - On the layer, not an individual element
  - Needs to have reference to origin and targetElements
- Consider parsing scroll-margin-top, scroll-margin-bottom for revealing
- Allow [up-emit] for buttons
- Honor `Vary` for cache keys (hard!)
- Do we want a preventable up:fragment:hungry event?
- Do we want a preventable up:request:reuse event?
  - Maybe even :reused since there is no :loaded for cached requests
- Experiment with property mangling vs. public API
- Issue with splitting Immediate-Child-Selectors: https://makandra.slack.com/archives/C02KGPZDE/p1659097196752189
- This always passes: expect(window).not.toHaveUnhandledRejections()
  - All rejections seem to be delayed until the test ends
  - Maybe a Jasmine issue?
- Can we get rid of the afterMeasure() callback?
- Support { scroll: 'keep' }
  - Similiar to { focus: 'keep' }
  - Store scrollTops around a viewport in UpdateLayer
  - Possibly refactor tops to up.ScrollTopsCapsule
- Check that the target (and all non-successful target attempts) are visible in the log
  - Possibly highlight
- Do we want to support ` or ` in targets?
  - Is there any case other than [up-target], where we already have [up-fallback] ?
- Should animations force painting?
  - I don't understand how the transitions work when we set both the first and final frame in the same JavaScript task
- Should we send optional targets in X-Up-Target ?
  - As :maybe?
    - This would mean we need to parse [up-hungry] elements before the request
  - As a separate header?
  => I think it's :maybe and then update unpoly-rails so target? and any_target? ignore the :maybe
- Reconciliation of <head> elements
- Maybe auto-submit should not navigate by default
  - How to restore this?
  - up-navigate ?
  - up-watch-navigate ?
  - up-autosubmit-navigate ?
  - Is it cool that search results would no longer get a URL update?
- Does [up-back] use the previous layer location?
- Async compiler functions
  - Allow to return a promise for a destructor
    - This would mean *all* async compilers would register a destructor
    - We could remove the .up-can-clean if they end up not registering one
  - up.destructor() could detect if an element is destroyed and run the destructor immediately?
    - What's the performance impact?
      - !element.isConnected && element.closest('.up-destroyed') ?
- There was a case where { origin } should look inside an origin:
    up.render('.day_menu_dish_autocomplete .day_menu_dish_autocomplete--suggestions', {
      origin: titleInput,
      url: '/day_menus/suggestions'
    })
- Expose up.fragment.config.renderOptions
  - Now that we have *some* opinion about the defaults { abort: 'target', focus: 'keep', revalidate: 'auto' }, users may want to deactivate
- Try to have a 'hash' strategy in overlays
  - Also update doc page /focus
- Use native `:has` where available
- Split JavaScript => Do this after asset reconciliation
- input.setCustomValidity() should block submission
- Replace symlinks in dist/ with copied files
  - Not trivial, see hk/copy-dist-artifacts
- Maybe a way to mark elements as keep before rendering?
  - This would also be up:fragment:loaded
  - Maybe a render option { useKeep: [....] }
    - With additional fragments to keep
    - Could be set both in initial render and in up:fragment:loaded
    - Would not require an [up-keep] on the other side
- Consider keepSelectors and noKeepSelectors
  - Now that [up-keep] no longer has a value?
    - Note that we do have [up-keep] hardcoded in multiple places
- Should we offer a way to manually add etags?
  - E.g. up.on('up:request:loaded', ({ response }) => { response.etag ||= sha1(response.body) })
  - Should this even be a default?
  => People can already set response.headers['ETag'], although that's not documented
- Matching in the vicinity of ancestors should use subtree, not just descendants of the ancestor
  - In a form we should always be able to say form:has(:origin) .descendant, even if the origin turns out to be the form itself
    - But :has() does not work like that?
- [up-on-accepted-reload], { onAcceptedReload }
- [up-on-accepted-validate], { onAcceptedValidate } (aber hier brauche ich immer einen param)
- Consider removing all tagnames from public selectors
  - We already had to remove tag names of multiple-use attrs like [up-watch]
  - current
    - a[up-follow]
    - a[up-instant]
    - a[up-preload]
    - form[up-submit]
    - a[up-accept]
    - a[up-dismiss]
    - a[up-layer=new]
    - a[up-transition]    \__
    - form[up-transition] /
    - a[up-alias]
    - a.up-current
    - a[up-emit]
    - a[up-back]
  - deprecated
    - a[up-close]
    - a[up-drawer]
    - a[up-modal]
    - a[up-popup]
- Make accepting response available on up:layer:accepted
  - This lets us write: up-on-accepted="up.render('.table', document: event.response.text)">
  - Update demo app
- Test that Requests hold no references to detached elements after one task
- Can layer objects nullify their { element, tether } once closed?
  => This may cause async JS to throw, if that JS wants to go through the layer shortly after closing
  => How about we do this 10 seconds after { onFinished } or so?
- It may be nice if guardEvents see the change's getPreflightProps().fragments
  - Either lazy with Object.definePropery() *or*, if we find that we're going to call getPreflightProps() anyway, just call it.
  - Can we memoize getPreflightProps() in FromURL ?
- up.validate() always submits to the first submit button
  => Is this a bug or a feature that we use the same behavior as submit would?
- When a layer reaches a close condition, should we still render [up-hungry][up-if-layer=any] elements in another layer?
  - Would be practical for flashes
  - Would be weird for API. Render events flying afterwards, we cannot communicate a RenderResult.


TODOs for V3
============


Various changes
---------------

- Migrate: Warning on { solo } render option
  - "Unpoly 3+ only aborts requests targeting the same fragment. Setting [up-solo=false] or { solo: false } may no longer be necessary."
- Migrate: Warning when setting old expiry
  - "Unpoly 3+ automatically reloads cached content after rendering to ensure users always see fresh data ("cache revalidation"). Setting an expiry may no longer be necessary."
- Vary-capable cache
  - Requests must set their auto-headers sooner, e.g. in constructor
  - Print warning when setting up.network.requestMetaKeys
  - Move /caching#improving-cache-hit-rates to its own doc page /optimizing-responses
    - Parent is up.protocol
    - Link from /caching
    - Link everywhere were it says "optimizing", "customizing" or "shorten" responses
    - Make sure Vary is mentioned a lot
  - up.FIFOCache
    - Replace up.Cache with up.FIFOCache
    - Test that caching works
    - Test that FIFO is honored when capacity is reached
  - up.Request.Cache
    - To be fully correct the cache needs to be notified after up:request:load (cache relevant fields could have changed)
    - up.cache.renamingCacheKey(() => ...)
    - Tests
      - Following a pending requests that responds with an unexpected Vary causes the following request to be re-queued. In the end we have two separate cache entries.
      - After a response arrives with Vary, all future requests are assumed to have that same Vary
      - After modifying cache-relevant props in up:request:load, the request remains cached
      - Test that we can remove unwanted X-Up headers in up:request:load and the request remains cached
      - Test that capacity and FIFO is honored
    - up-migrate should throw an error when setting up.network.config.cacheSize = 0
      - "Disabling the cache with up.network.config.cacheSize = 0 is no longer supported. Set up.network.config.autoCache = false instead."
    - Cache last assigned cache key on the Request for performance?
  - Remove docs for requestMetaKeys
  - Remove debug statements
- Now that compilers have the meta arg it should be possible to give up.RenderResult new { request, response } props
- Custom attributes are not copied into [up-expand]
  - up.link.config.expandableAttributes ?
  - up.link.config.expandableAttribute (attribute, element)


Docs
----

### General

- Finish the CHANGELOG
  - Unfinished sections
  - New commits
  - No unbounded caches anymore
  - Optimizing responses must send Vary
- Check if the index links to doc pages preferrably
- Events emitted through up.Layer#emit() must all have a { layer } prop documented
  - e.g. up:layer:location:changed hasn't documented this
- Test that when an [up-hungry][up-if-layer=any] updates in another layer, layer.current and meta.layer points to the correct layer
- Document [up-href]
- X-Up-Location: Mention that is only needed when you want a different URL in the browser. Link to preserving params in unpoly-rails.
- X-Up-Method: You may also leave out the `X-Up-Method` header. In this case Unpoly will assume a `GET` method after a redirect. This assumption is correct for redirects with status codes 301, 302 and 303, and incorrect for the [less common codes 307 and 308](https://makandracards.com/makandra/501468-modern-http-status-codes-for-redirecting).

### Other docs


### Ideas for new topic pages

- How history is updated
  - Explain { history: 'auto' } and up.fragment.config.autoHistoryTargets
  - History in overlays
    - Always know their location, even if it might not be visible
    - Explain that servers should always render full pages
  - History restoration / Back button
    - This is currently documented in up:location:restore
    - Will collapse layers
      - Pages should work in both
      - Subnavigations make it easy
      - You can disable layer history
    - Customize restoration behavior
- Preloading
  - (Currently sitting in a[up-preload])
  - On Hover
  - Programmatically
    - Example: Preload next/prev
- Options and defaults
  - Everything is opt-in
  - Navigation enables a set of new defaults
    - Navigation options are the only opinioniated defaults that are opt-out
  - config options
  - auto-options
  - Most options in up.render() can also be set via an attribute
    - JavaScript options override HTML attributes
    - If we cannot serialize an option into an attribute, you can use `event.renderOptions` in up:link:follow, up:form:sumit
  - Explain that you can often override renderOptions in event handlers
    - This is already explained in /render-hooks
- Rendering from strings
  - { document }
  - { fragment }
  - { content }



V3.pre launch
-------------

- This would need a separate Algolia index, *or* disable full text search for pre.
  - We do we name things "latest" when we scope by version?
    - The Capistrano targets are called v1, v2, v3
    - The Algolia indexes are called unpoly-site_v2, unpoly-site_v3 or maybe even v2.unpoly.com, v3.unpoly.com
    - We keep the .htaccess saying v1*.unpoly.com is never indexed
    - At the day we launch v3, we only change the DNS
      - unpoly.com becomes a CNAME for v3.unpoly.com
        => No, this needs to be changed in VHost
      - how do we get v3 to redirect to unpoly.com?
        - in the main branch .htaccess we redirect v??.unpoly.com to unpoly.com instead of enabling norobots


V3 final Launch
---------------

- Track CHANGELOG with changes done since the V3 presentation
  - Exclude changes we shipped as maintenance release 2.7.x
- Fix deploy targets for 2.x-stable@unpoly-site
  - This should only have a v2 target, and it should deploy to v2.unpoly.com
- We don't need anything from Ops
  - We already have v2.unpoly.com, it just redirects to unpoly.com (via .htaccess in Git) while the current version is v2
- We need a separate Algolia index for v2
  - v3 would stay on "latest"
  - use that index in unpoly-site/2.x-stable
- Update the version switcher to include 3.x on v2.unpoly.com and the new unpoly.com
- Add a "You're viewing docs for an old version of Unpoly" banner to v2.unpoly.com
- *Maybe* have a pre.unpoly.com
- Submit to to https://github.com/github/release-radar/
- Open heads-up issues for server integration maintainers
  - Explain new / deprecated headers
  - Explain that we should send Vary when optimizing responses
- Update Glitch template: https://glitch.com/edit/#!/empty-unpoly-project
- Schedule Tweets
  - For new doc pages
  - For new features (from slides)
  - Detecting use of deprecated APIs with automated tests
  - Re-post wizard
- Demo app
  - Upgrade to unpoly3
  - Redeploy
- Do a podcast
- Fix unpoly3-slides
- Migrate and rebase SF branch
  - Notify ED



Icebox
======

- Allow late registrations of compilers and macros without priority
  => OK for compilers, but what about macros? They have an intrinsic priority (before all compilers)
- Consider whether up.validate() promises should wait until no more solutions are pending
  => We would need to merge RenderResult#target in some meaningful way
- Rename "finished" to "concluded"
- Should up:click set up.layer.current ?
  - It would be more convenient, but it's only relevant for popups or backdrop-less modals. This is rare.
- New onTransitioned() callback to take some load off from onFinished()
- Move scroll positions into state
  - This gets rid of the other up.Cache usage
  - This may mean we need to lose up.viewport.restoreScroll() and { scroll: 'restore' } and { saveScroll: true }
    - Losing { scroll: 'restore' } is super sad :(
  => Maybe revisit when the Navigation API is supported
- Improve polling in the background
  - It would be great to *not* have a timeout running while we're in the background or offline
  - It would be great to not wait up to 10 seconds when we're re-focused or regain connectivity
- Elemente mit [up-hungry][up-layer=any] müssten wir *eigentlich* auch austauschen, wenn wir einen neuen Layer öffnen
  - OpenLayer kann aber gar nicht mit mehreren Steps umgehen
- can badResponseTime be a function that takes a request?
  => Yes, but not trivially
- Consider using `Cache-Control: stale-while-revalidate=<seconds>` to indicate how long we can use a response
  - But it could be paired like this: Cache-Control: max-age=1, stale-while-revalidate=59
  - But then again we ignore Cache-Control for all other purposes
    - E.g. Cache-Control: no-store
    - E.g. Cache-Control: max-age
    - How would Cache-Control: no-cache (equivalent of max-age=0 must-revalidate) work in connection with up.fragment.config.autoRevalidate ?
  - Maybe do a bigger workover of Cache-Control?
- Do follow links with [target=_self]
- up:click forking could print a warning when an a[href] is instant, but not followable
- Is it weird that up.layer.affix appends to the first swappable element instead of the contentElement?
  - It's actually more like "appendableElement"
  - Maybe offer up.Layer#append
- Consider exposing up.layer.contentElement
- Do we want a shortcut macro for this:
      <input up-validate up-keep up-watch-event="input">
  - <input up-live-validate>
  - It's weird for users who don't target the input. They may expect to just override the event.
  - We would need to make keepable selectors configurable to include this one
- We could support this with more pseudo-class selectors like :form-group and :submit-button
  - :submit-button is hard to build origin-aware => It could just be a substitution with :is() / :-moz-any() & :-webkit-any()
  - :form-group is also supper hard to support in a selector like ".foo, :form-group, :bar" due to the way we hacked :has()
    - :has() is still behind a flag in Chrome and no Firefox support
- Introduce boundaries or "softly isolated zones"
  - The idea started with: Should fragment lookups with an { origin } within a form prefer to look within the form?
    - Also related to https://github.com/unpoly/unpoly/issues/197 , which would no longer work
      now that a form submission's orgin is the submit button instead of the form element
  - E.g. <div up-boundary>
    - Lookups within prefer to match within the boundary
    - It's a new fallback target
      - Also for errors
    - up.fragment.config.boundaryTargets = ['[up-boundary]', 'form', ':main']
    - Is this also controlled by { fallback }?
    - Maybe identification using [up-boundary=123]
      - But don't enforce this, it's not a great auto-target
    - Should this rather be [up-zone]?
      - If we ever make fully isolated containers we would call them frames
        - https://github.com/unpoly/unpoly/discussions/350
    - We could also offer :zone as a selector
    - Would we still offer { target: '.container .child' }?
      - Would we offer { target: ':zone .foo' }, since it's really the same as { target: '.foo' } ?
    - Is this a repetition of "fragment needs to know whether it is used as component or main target"?
      - We would need to fix infinite looping in expandTargets()
      - It would be nice to disable history in a zone
        - but then it's not usable as a main target
        - Disable history in a container?
          - It's weird to nest multiple containerish elements
        - => This is really already solved through { history: 'auto' }, which only updates history if updating :main
- Rendering: allow { scrollBehavior: 'smooth' } when we're not morphing
  - Could we even allow this *when* morphing?
- What is the purpose of up.error.emitGlobal?
  - Don't we throw a compound error that would be tracked?
    - We do
    - But the error does not bubble up
    - What do we want here?
- New up.render() options to clone from a template
  - { documentTemplate }, { fragmentTemplate }, { contentTemplate }
  - Separate doc page "Rendering from local content"
  - Fail when template cannot be found
  - But what if I really need to re-use an existing element that is then placed back into the body, like in WB?
- Consider implementing an abortable up:navigate event
  - This would be the first feature that goes beyond "navigation is just a preset"
  - People might expect history changes to trigger this
  - Maybe think about this more
- Replace up.hello() and up.syntax.clean() to MutationObserver()
- Do we want to serialize all actions in a form?
  - up-sequence="form"
  - This would need to abortable on submit => Would be handled by existing { solo: 'target' } IF there is a request
  - This would need to abortable on form destroy => Would be handled by existing { solo: 'target' } IF there is a request
  - => This would need to be handled by up.Queue, or else there would be nothing to abort
  - => It is not sufficient to have up.form.sequence(..., callback)
  - => We would need to do something like { sequence: ElementOfSubtree }
  - => Before picking a new request, make sure no existing request exists
  - What about our old idea: { order: 'abort target', order: 'abort form', order: 'after form', order: 'after selector' }
      => How to say "after ElementObject" ?
  - Who would fetch the element that is 'form' or 'selector'?
      => up.Change.UpdateLayer#getPreflightProps(), which already loads targetElements()
  - What would we do if both was given, e.g. { solo: true, sequence: 'form' }
    - Do we forbid the combination?
    - Do we first abort, then do a squence?
    - Do we first wait, then abort? => I think this, but this also means our { solo } handling is in the wrong place. It must move to the queue.
  - Does { sequence: 'form' } also queue local content, like { solo } ?
   - We could do something like up.LocalRequest, but then local updates would no longer be sync!
   - We could not support { sequence } for local updates => YES
  - What about cached content with { sequence }?
    - We could do queue.asapLocal() which immediately executes unless there is { sequence }
  - How does queue resolve a sequence?
    - Before dispatching a request with { sequence }
    - Check if we have *current* requests with { sequence }
    - If any of the other requests's sequence contains our *or* if any other sequence is contained by ours, don't dispatch
- Guard Events for Rendering could have a Promise for "done"
  - Is this better than setting event.renderOptions.onFinished()?
    - Yes, because onFinished may not fire for fatals or prevented up:fragment:loaded
  - How would this work together with future up.RenderRequest?
  - How would this work together with "local changes are sync"?
- Consolidate [up-validate], [up-switch] and [up-watch] into a tree of form dependencies
  - This way we can selectively disable parts of the form
- Functionality that checks for isDetached() should probably also check for .up-destroying
- Improve `{ focus: 'keep' }` so it focuses the former form group if we lose focus
  - This may be easier said than done
    - we would need to remember the original form group before the swap in the FocusCapsule
    - re-discover the form group in the new HTML
    - check that the form group is a closer match than target-if-lost
    - come up for a better name for the option (target-if-lost)
- New event up:request:solo ?
- Consider delaying appending of new layer elements until we have constructed all children https://github.com/unpoly/unpoly/discussions/314
- Publish { onQueued }
  - We're currently only using onQueued to get the request of a rander job, so we can abort it
  - More canonic would be if RenderJob had an abort() method
- Wir aborten bereits laufende [up-validate] wenn das Formular submitted, wird, aber laufende Watcher-Delays warten können danach noch Dinge tun
  - Wie wäre "submit stoppt das delay"?
  Evtl. Warnung ausbauen: "Will not watch fields without [name]"
- [up-emit] auf Buttons erlauben
- Beim Schließen des Modals prevented jemand up:layer:dismiss, und dann steht "Abort Error: Close event was prevented" in der Konsole.
  - Wollen wir das schlucken?
  - Zumindest bei ui-elementen wie [up-dismiss] ?
- DestructorPass sammelt zwar Exceptions, aber wirft am Ende. Wer fängt das dann? Der Wunsch wäre, dass das drumrumliegende up.destroy() noch zu Ende läuft, dann aber up.CompilerError wirft.
- ConstructorPass sammelt zwar Exceptions, aber wirft am Ende. Wer fängt das dann? Der Wunsch wäre, dass das drumrumliegende up.render() oder up.hello() noch zu Ende läuft, dann aber mit up.CompilerError rejected.
- Update "Long Story" Slides with new API
- Doc page about "Fragments from local HTML"
  - link from [up-document], [up-fragment], [up-content], { document, fragment, content }.
- Warn when registering compiler in [up-] namespace
- Consider documenting errors
  - But what would be the @parent ?
  - up.CannotCompile
  - up.CannotMatch
  - up.Offline
  - up.AbortError
    - has { name: 'AbortError' }


Decisions
=========

- Should the old "clear" be "expire" or "evict"?
  => We really want to push our new defaults for both
  => I think it should be "expire". Most users set a lower expire time.
- remove up.util.flatMap() => No, we need it to flatMap array-like objects (e.g. arguments)
  - Do we want to move to saveState() / restoreState()?
    - I think we want to keep the [up-focus] and [up-scroll] options separate.
      - E.g. we want to focus the main element, but reset scroll.
      - This could also be fixed by revealSnap ?
    - These are eerily similar:
      - https://unpoly.com/scrolling
      - https://unpoly.com/focus
      - The -if-lost suffix can only pertain to focus
    - What would be the name for such an attribute?
      - [up-spotlight]
      - [up-viewport] (classes with [up-viewport]
      - [up-highlight]
      - [up-locus]
      - [up-present]
      - [up-light]
      - [up-shine]
      - [up-state]   (seltsam: up-state=".element")
      - [up-point]
      - [up-pinpoint]
      - [up-attention]
      - [up-focus] also scrolls?
      - [up-show]
      - [up-view]
    => I think power users want to control this separately
    => Also we need to call it at different times
    => Also the auto options work differently, e.g. if there is an [autoscroll] element in the new fragment
    => We might offer a shortcut like [up-view] and [up-save-view] as a shortcut to set both at once
- Replace up.rails by accepting methods / conform from data attributes in options parser
  => This wouldn't work in scenarios where both Rails UJS and Unpoly were active
- No longer send X-Up-Location with every response
  => No we should keep sending it, as this excludes redirect-forwarded up-params
- Consider reverting: up:request:late: Consider the time a promoted request was loading in the background
  => For this we would need to track when a request was promoted to the foreground
- Do we trigger onFinished when preloading?
  => No, users can use the promise or onLoaded()
- Reconsider how many lifecycle callbacks we want to parse from links
  - Benchmark up.link.followOptions()
    - console.time('parse'); for (var i = 0; i < 10000; i++) { up.link.followOptions(link) }; console.timeEnd('parse')
    - VM481:1 parse: 1091.6689453125 ms
    => It takes 0.1 ms
    => This is not a performance issue
- Find a scenario where it's better to read the etag from [etag] instead of response.etag
  - This should not matter for revalidation after a swap
  - When reloading an arbitrary fragment, an earlier response may not be available
- Test if browsers honor cache keys for XHR requests
  - Yes, it honors Cache-Control: max-age=...
  - We can override it for fetch()
- With our long cache eviction background tabs could hog a lot of memory
  => No, since we also limit the number of cache entries to the cache never exceeds some MB
- up.link.cacheState(link) to people can build .offline classes themselves
  => Users can already use up.cache.get
  => We could clean up Request#state and publish this for more goodness
  - Return any known up.Respone for the given link
    - It already has useful properties { evictAge }, { expireAge }?
    - We may eventually offer up.Response#revalidate()
  - Return null while the request is in flight
    => Or do we want an up.CacheState that also returns here?
  - It will be hard to do implement this without actually calling up.link.follow() and up.render(), since e.g. the target choice is hard and part of the cache key
    - Make this an early return in up.Change.FromURL, like with options.preload
- Test if we can preserve element.upPolling (or at least the { forceState }) through up.reload({ data })
  => It's hard since there's the case that the server no longer responds with [up-poll], but we want to keep polling when forceStarted
- Should we delete options.data if a fallback is loaded?
  - This would also be true for other options, like a selector in focus/scroll
  - We would sometimes need to guess, e.g. { focus: ':main' } may also be a good default for a fallback
  => I think this is not a real case since we're not going to use { data } together with { fallback }
- Consider moving [up-etag], [up-time] and related functions to up.protocol
  => While there's some merit to that, we would need to rename up.fragment.etag() to up.protocol.fragmentETag() etc.
  => What's with up.fragment.source()?
- [up-hungry][up-placement]
  => This only makes sence when we have some form of deduping
- What do we log when no replacement target is available? => up.render() throws an error
- Reconsider why we don't call onRendered() for empty updates
  - Pro: Call it for every pass
    - We do still update scroll and focus, even for empty responses
      - Maybe even location?
    - We will update more in the future with head merging
    - There is no other hook for "after $things changed"
      - But nothing changed after an empty render? At least not in the DOM.
    - We can simplify docs for onRender and up-on-render
  - Con: Keep it like now
    - If we render without fallback we still need to check if up.RenderResult#fragment is defined
    - It will be super rare that the first render pass does not return anything.
      - However, we would *always* get empty onRendered calls for revalidation
  => Keep it, but improve docs
- Maybe ship empty unpoly.es5.js und unpoly.es5.min.js that just say to use ES6
  => Not worth the hassle
- Does it make sense to have onKeep in render options?
  => I find it confusing to have both { onKeep } and { useKeep } in the same functions
  => Maybe we can find a way to merge it with { useKeep }
- Consider up.layer.config.isolateLabels
  => Wait until there is a use case
  => Users can always just intercept `click` themselves
- Consider [aria-haspopup]
  => This would require a compiler automatically setting this for [up-layer=new] links (and all shortcuts)
  => Don't do this for performance. Delegate to apps.
- Should config.autoCache allow to cache error responses? => That's a hard question to answer
- Get rid of response.request (which contains references to a layer), response.xhr ?
  => This is hard because up.cache.expire() expires requests, not responses. Hence up.Response delegates { expired } to its response.
- Can we allow await in Callbacks?
  - new AsyncFunction()
  - This would not work trivially with the postprocessing in up.NonceableCallback
- Returning 'auto' for default would be a good way to override configs with exceptions
  - request.url.endsWith('/edit') ? false : 'auto'
  - Since this already the 'autoMeans' config we cannot return 'auto' here
- Replace u.flatten() with Array#flat()
  => We keep array-related utils because ours work with non-Array lists and iterators
- Replace u.flatMap() with Array#flatMap()
  => We keep array-related utils because ours work with non-Array lists and iterators
